{"version":3,"sources":["webpack:///./src/templates/HallOfFamePlanetsNavigation.tsx","webpack:///./src/components/Pagination/index.tsx"],"names":["data","pageContext","location","categories","group","scenarios","edges","fluid","file","childImageSharp","style","position","top","bottom","width","pageTitle","currentPageName","pageDescription","categoryDescription","pageType","image","className","css","borderLeft","borderRight","borderTop","fontWeight","to","active","map","category","fieldValue","kebabCase","type","discoveryFacility","numPages","pagination","start","skip","end","currentPage","limit","count","page","path","pagePath","itemsPerPage","node","name","fixed","fields","scenarioImage","pageQuery","border","borderBottom","range","items","key","i","push","renderRange","getPaginationRange"],"mappings":"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","file":"component---src-templates-hall-of-fame-planets-navigation-tsx-0d1ad2b3a506ab69ca29.js","sourcesContent":["import React, { ReactElement, Fragment } from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport kebabCase from \"lodash/kebabCase\";\nimport Nav from \"../components/Nav\";\nimport NavItem from \"../components/NavItem\";\nimport Pagination from \"../components/Pagination\";\nimport Header from \"../components/Header\";\nimport \"./Navigation.less\";\n\ninterface IndexProps {\n  data: {\n    scenarios: {\n      edges: {\n        node: {\n          type: string;\n          discoveryFacility: string;\n          name: string;\n          fields: {\n            scenarioImage: {\n              childImageSharp: {\n                fixed: any;\n              };\n            };\n          };\n        };\n      }[];\n    };\n    file: {\n      childImageSharp: {\n        fluid: any;\n      };\n    };\n    categories: {\n      group: { fieldValue: string }[];\n    };\n  };\n  pageContext: {\n    limit: number;\n    skip: number;\n    discoveryFacility: string;\n    numPages: number;\n    currentPage: number;\n    currentPageName: string;\n    pagePath: string;\n    categoryDescription: string;\n    type: string;\n    pageType: string;\n  };\n  location: any;\n}\n\nexport default ({ data, pageContext, location }: IndexProps): ReactElement => {\n  const categories = data.categories.group;\n  const scenarios = data.scenarios.edges;\n\n  return (\n    <Fragment>\n      <Img\n        fluid={data.file.childImageSharp.fluid}\n        style={{ position: \"fixed\", top: 0, bottom: 0, width: \"100%\" }}\n      />\n      <Header\n        pageTitle={`Exoplanets ${pageContext.currentPageName}`}\n        pageDescription={pageContext.categoryDescription}\n        location={location}\n        pageType={pageContext.pageType}\n        image={`https://www.gravitysimulator.org/images/social/${pageContext.currentPageName}.jpg`}\n      />\n      <section className=\"scenarios-wrapper\">\n        <div>\n          <nav>\n            <Nav\n              css={{\n                borderLeft: \"none\",\n                borderRight: \"none\",\n                borderTop: \"none\",\n                fontWeight: \"bold\"\n              }}\n            >\n              <Link to={`/`}>\n                <NavItem active={pageContext.currentPageName === \"All\"}>\n                  All\n                </NavItem>\n              </Link>\n              <Link to={`/new-scenarios`}>\n                <NavItem\n                  active={pageContext.currentPageName === \"New Scenarios\"}\n                >\n                  New Scenarios\n                </NavItem>\n              </Link>\n              <Link to={\"/misc/create-new-gravity-simulation\"}>\n                <NavItem>Create New Simulation</NavItem>\n              </Link>\n              {categories.map(category => (\n                <Link\n                  to={\n                    category.fieldValue !== \"Exoplanets\"\n                      ? `/${kebabCase(category.fieldValue)}`\n                      : `/${kebabCase(category.fieldValue)}/hall-of-fame`\n                  }\n                >\n                  <NavItem\n                    active={\n                      kebabCase(pageContext.currentPageName) ===\n                        kebabCase(category.fieldValue) ||\n                      category.fieldValue === \"Exoplanets\"\n                    }\n                  >\n                    {category.fieldValue}\n                  </NavItem>\n                </Link>\n              ))}\n            </Nav>\n          </nav>\n\n          {pageContext.type === \"Exoplanets\" && (\n            <Nav\n              css={{\n                borderLeft: \"none\",\n                borderRight: \"none\",\n                borderTop: \"none\",\n                fontWeight: \"bold\"\n              }}\n            >\n              <Link to={`/exoplanets/hall-of-fame`}>\n                <NavItem\n                  active={pageContext.currentPageName === \"Hall of Fame\"}\n                >\n                  Hall of Fame\n                </NavItem>\n              </Link>\n\n              {[\"Transit\", \"Radial Velocity\", \"Imaging\", \"Microlensing\"].map(\n                discoveryFacility => (\n                  <Link to={`/exoplanets/${kebabCase(discoveryFacility)}`}>\n                    <NavItem\n                      active={\n                        kebabCase(pageContext.currentPageName) ===\n                        kebabCase(discoveryFacility)\n                      }\n                    >\n                      {discoveryFacility}\n                    </NavItem>\n                  </Link>\n                )\n              )}\n            </Nav>\n          )}\n\n          {pageContext.numPages > 1 && (\n            <Pagination\n              pagination={{\n                start: pageContext.skip,\n                end: pageContext.currentPage * pageContext.limit,\n                count: pageContext.numPages,\n                page: pageContext.currentPage,\n                path: pageContext.pagePath\n              }}\n              itemsPerPage={pageContext.limit}\n            />\n          )}\n        </div>\n        <section className=\"navigation-scenarios-title\">\n          <h2>{`Exoplanets - ${pageContext.currentPageName}`}</h2>\n        </section>\n        <div className=\"scenarios-gallery\">\n          {scenarios.map(({ node }) => (\n            <Link to={`/${kebabCase(node.type)}/${kebabCase(node.name)}`}>\n              <div className=\"scenario-link\">\n                <Img fixed={node.fields.scenarioImage.childImageSharp.fixed} />\n                <p className=\"scenario-name\">{node.name}</p>\n              </div>\n            </Link>\n          ))}\n        </div>\n      </section>\n    </Fragment>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($limit: Int, $skip: Int, $background: String) {\n    scenarios: allScenariosJson(\n      filter: { hallOfFame: { eq: true } }\n      sort: { order: ASC, fields: [sortOrder] }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          type\n          discoveryFacility\n          name\n          pl_pnum\n          fields {\n            scenarioImage {\n              childImageSharp {\n                fixed(width: 250, height: 150) {\n                  ...GatsbyImageSharpFixed\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    categories: allScenariosJson {\n      group(field: type) {\n        fieldValue\n      }\n    }\n    file(relativePath: { eq: $background }) {\n      childImageSharp {\n        fluid(maxWidth: 2000) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n  }\n`;\n","import React, { ReactElement } from \"react\";\nimport { Link } from \"gatsby\";\nimport Nav from \"../Nav\";\nimport NavItem from \"../NavItem\";\nimport { getPaginationRange } from \"../../utils\";\n\ninterface PaginationProps {\n  itemsPerPage: number;\n  pagination: {\n    count: number;\n    start: number;\n    end: number;\n    page: number;\n    path: string;\n  };\n}\n\nexport default ({ pagination }: PaginationProps): ReactElement => {\n  const renderRange = (range: { start: number; end: number }) => {\n    const items = [\n      <Link to={pagination.path}>\n        <NavItem key=\"pagination-first-page\">First Page</NavItem>\n      </Link>\n    ];\n\n    for (let i = range.start; i <= range.end; i++) {\n      items.push(\n        <Link to={i !== 1 ? `${pagination.path}/${i}` : pagination.path}>\n          <NavItem key={i} active={i === pagination.page}>\n            {i}\n          </NavItem>\n        </Link>\n      );\n    }\n\n    return [\n      ...items,\n      <Link to={`${pagination.path}/${pagination.count}`}>\n        <NavItem key=\"pagination-last-page\">Last Page</NavItem>\n      </Link>\n    ];\n  };\n\n  return (\n    <Nav css={{ border: \"none\", borderBottom: \"1px solid #545454\" }}>\n      {renderRange(getPaginationRange(pagination.page, pagination.count))}\n    </Nav>\n  );\n};\n"],"sourceRoot":""}